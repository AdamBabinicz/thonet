import { useState } from "react";
import { Switch, Route, useLocation } from "wouter";
import { QueryClientProvider } from "@tanstack/react-query";
import { queryClient } from "./lib/queryClient";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { ThemeProvider } from "@/components/theme-provider";
import { AriaLiveProvider } from "@/components/AriaLiveProvider";
import { ControlHub } from "@/components/control-hub";
import Home from "@/pages/home";
import Privacy from "@/pages/privacy";
import Terms from "@/pages/terms";
import HeritageArticle from "@/pages/heritage-article";
import NotFound from "@/pages/not-found";
import { useLanguageFromUrl } from "@/hooks/useLanguageFromUrl";
import { useTranslation } from "react-i18next";
import { AnimatePresence } from "framer-motion";
import "./lib/i18n";

function AppContent() {
  useLanguageFromUrl();
  const { t } = useTranslation();
  const [location] = useLocation();

  return (
    <AnimatePresence mode="wait">
      <Switch key={location}>
        <Route path="/" component={Home} />
        <Route path="/:lang(pl|en|de)" component={Home} />
        <Route
          path={`/:lang(pl|en|de)/${t("routes.privacy")}`}
          component={Privacy}
        />
        <Route
          path={`/:lang(pl|en|de)/${t("routes.terms")}`}
          component={Terms}
        />
        <Route
          path={`/:lang(pl|en|de)/${t("routes.heritage")}/:slug`}
          component={HeritageArticle}
        />
        <Route component={NotFound} />
      </Switch>
    </AnimatePresence>
  );
}

function App() {
  const [isControlHubOpen, setIsControlHubOpen] = useState(false);

  const toggleControlHub = () => {
    setIsControlHubOpen(!isControlHubOpen);
  };

  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider>
        <TooltipProvider>
          <AriaLiveProvider>
            <div className="min-h-screen bg-background text-foreground font-sans antialiased">
              <ControlHub
                isOpen={isControlHubOpen}
                onToggle={toggleControlHub}
              />
              <div
                className={`transition-transform duration-300 ease-in-out ${
                  isControlHubOpen ? "lg:ml-80" : "ml-0"
                }`}
              >
                <AppContent />
              </div>
              <Toaster />
            </div>
          </AriaLiveProvider>
        </TooltipProvider>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

export default App;


------------------------------

import { SEOHead } from "@/components/seo-head";
import { HeroSection } from "@/components/hero-section";
import { BiographySection } from "@/components/biography-section";
import { CollectionSection } from "@/components/collection-section";
import { InteractiveModulesSection } from "@/components/interactive-modules-section";
import { HeritageSection } from "@/components/heritage-section";
import { TimelineSection } from "@/components/timeline-section";
import { MapSection } from "@/components/map-section";
import { FooterSection } from "@/components/footer-section";
import { useTranslation } from "react-i18next";
import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { ArrowUp } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";

const pageVariants = {
  initial: {
    opacity: 0,
  },
  in: {
    opacity: 1,
  },
  out: {
    opacity: 0,
  },
};

const pageTransition = {
  type: "tween",
  ease: "anticipate",
  duration: 0.5,
};

export default function Home() {
  const { t } = useTranslation();
  const [showWelcomePopup, setShowWelcomePopup] = useState(false);
  const [isScrollTopVisible, setScrollTopVisible] = useState(false);

  const toggleScrollTopVisibility = () => {
    if (window.scrollY > 300) {
      setScrollTopVisible(true);
    } else {
      setScrollTopVisible(false);
    }
  };

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  useEffect(() => {
    const robustScrollToHash = (hash: string) => {
      if (!hash) return;
      const id = hash.replace("#", "");
      let attempts = 0;
      const interval = setInterval(() => {
        const element = document.getElementById(id);
        attempts++;
        if (element) {
          element.scrollIntoView({ behavior: "smooth", block: "start" });
          clearInterval(interval);
        } else if (attempts > 20) {
          clearInterval(interval);
        }
      }, 100);
    };

    const handleHashAction = () => {
      robustScrollToHash(window.location.hash);
    };

    handleHashAction();
    window.addEventListener("hashchange", handleHashAction);

    return () => {
      window.removeEventListener("hashchange", handleHashAction);
    };
  }, []);

  useEffect(() => {
    window.addEventListener("scroll", toggleScrollTopVisibility);
    const hasSeenPopup = sessionStorage.getItem("welcomePopupSeen");
    if (!hasSeenPopup) {
      const timer = setTimeout(() => {
        setShowWelcomePopup(true);
        sessionStorage.setItem("welcomePopupSeen", "true");
      }, 500);
      return () => clearTimeout(timer);
    }
    return () => {
      window.removeEventListener("scroll", toggleScrollTopVisibility);
    };
  }, []);

  return (
    <motion.div
      initial="initial"
      animate="in"
      exit="out"
      variants={pageVariants}
      transition={pageTransition}
    >
      <SEOHead isHomePage={true} />
      <a
        href="#main-content"
        className="skip-link focus:outline-none focus:ring-2 focus:ring-ring"
        data-testid="link-skip-content"
      >
        {t("navigation.skipToContent")}
      </a>
      <main id="main-content" className="transition-all duration-300">
        <HeroSection />
        <BiographySection />
        <CollectionSection />
        <InteractiveModulesSection />
        <HeritageSection />
        <TimelineSection />
        <MapSection />
      </main>
      <FooterSection />
      <div
        id="aria-announcements"
        className="sr-only"
        aria-live="polite"
        aria-atomic="true"
        data-testid="aria-announcements"
      ></div>
      <Dialog open={showWelcomePopup} onOpenChange={setShowWelcomePopup}>
        <DialogContent className="w-[95vw] sm:w-full sm:max-w-md text-center">
          <DialogHeader>
            <DialogTitle className="text-xl font-bold text-primary font-serif">
              {t("popup.title")}
            </DialogTitle>
            <DialogDescription asChild>
              <div className="space-y-4 pt-4 text-sm leading-relaxed text-muted-foreground">
                <p>{t("popup.mainText")}</p>
                <p className="font-semibold text-foreground">
                  {t("popup.dedication")}
                </p>
                <p className="text-xs italic pt-2">{t("popup.disclaimer")}</p>
              </div>
            </DialogDescription>
          </DialogHeader>
        </DialogContent>
      </Dialog>
      <AnimatePresence>
        {isScrollTopVisible && (
          <motion.button
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.8 }}
            transition={{ type: "spring", stiffness: 300, damping: 20 }}
            onClick={scrollToTop}
            className="fixed bottom-6 right-6 z-50 p-3 bg-primary text-primary-foreground rounded-full shadow-lg hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:ring-offset-background"
            aria-label={t("common.scrollToTop")}
            data-testid="button-scroll-top"
          >
            <ArrowUp className="w-6 h-6" />
          </motion.button>
        )}
      </AnimatePresence>
    </motion.div>
  );
}


-----------------------------------

{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "scripts": {
    "dev": "npm-run-all --parallel dev:client dev:server",
    "dev:client": "vite",
    "dev:server": "tsx --watch server/index.ts",
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js",
    "check": "tsc",
    "db:push": "drizzle-kit push"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@jridgewell/trace-mapping": "^0.3.25",
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-accordion": "^1.2.4",
    "@radix-ui/react-alert-dialog": "^1.1.7",
    "@radix-ui/react-aspect-ratio": "^1.1.3",
    "@radix-ui/react-avatar": "^1.1.4",
    "@radix-ui/react-checkbox": "^1.1.5",
    "@radix-ui/react-collapsible": "^1.1.4",
    "@radix-ui/react-context-menu": "^2.2.7",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-dropdown-menu": "^2.1.7",
    "@radix-ui/react-hover-card": "^1.1.7",
    "@radix-ui/react-label": "^2.1.3",
    "@radix-ui/react-menubar": "^1.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.6",
    "@radix-ui/react-popover": "^1.1.7",
    "@radix-ui/react-progress": "^1.1.3",
    "@radix-ui/react-radio-group": "^1.2.4",
    "@radix-ui/react-scroll-area": "^1.2.4",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.3",
    "@radix-ui/react-slider": "^1.2.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.1.4",
    "@radix-ui/react-tabs": "^1.1.4",
    "@radix-ui/react-toast": "^1.2.7",
    "@radix-ui/react-toggle": "^1.1.3",
    "@radix-ui/react-toggle-group": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.2.0",
    "@tanstack/react-query": "^5.60.5",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "connect-pg-simple": "^10.0.0",
    "date-fns": "^3.6.0",
    "drizzle-orm": "^0.39.1",
    "drizzle-zod": "^0.7.0",
    "embla-carousel-react": "^8.6.0",
    "express": "^4.21.2",
    "express-session": "^1.18.2",
    "framer-motion": "^11.13.1",
    "i18next": "^25.5.2",
    "i18next-browser-languagedetector": "^8.2.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.453.0",
    "memorystore": "^1.6.7",
    "next-themes": "^0.4.6",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-helmet-async": "^2.0.5",
    "react-hook-form": "^7.55.0",
    "react-i18next": "^15.7.3",
    "react-icons": "^5.4.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.15.2",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.2.5",
    "vaul": "^1.1.2",
    "wouter": "^3.3.5",
    "ws": "^8.18.0",
    "zod": "^3.24.2",
    "zod-validation-error": "^3.4.0"
  },
  "devDependencies": {
    "@replit/vite-plugin-cartographer": "^0.3.0",
    "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
    "@tailwindcss/typography": "^0.5.16",
    "@tailwindcss/vite": "^4.1.3",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "4.17.21",
    "@types/express-session": "^1.18.0",
    "@types/node": "20.16.11",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "cross-env": "^10.0.0",
    "drizzle-kit": "^0.31.4",
    "esbuild": "^0.25.0",
    "npm-run-all": "^4.1.5",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.17",
    "ts-node": "^10.9.2",
    "tsx": "^4.19.1",
    "typescript": "5.6.3",
    "vite": "^6.3.6"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  }
}

-----------------------------

import { useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { useAriaLive } from "@/hooks/useAriaLive";

export function ProductDeconstruction() {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState(false);
  const { announce } = useAriaLive();

  const toggleDeconstruction = () => {
    const nextState = !isExploded;
    setIsExploded(nextState);

    const message = nextState
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    announce(message);
  };

  const parts = {
    backLoop: {
      y: isExploded ? 110 : 0,
      x: isExploded ? -75 : 0,
      rotate: isExploded ? -12 : 0,
    },
    innerArch: {
      y: isExploded ? 25 : 0,
      x: isExploded ? 95 : 0,
      rotate: isExploded ? 25 : 0,
    },
    seat: {
      y: isExploded ? -150 : 0,
      x: isExploded ? 95 : 0,
      rotate: isExploded ? 15 : 0,
    },
    ring: {
      y: isExploded ? 60 : 0,
      x: isExploded ? 90 : 0,
      rotate: isExploded ? 10 : 0,
    },
    frontLegs: {
      y: isExploded ? -220 : 0,
      x: isExploded ? -50 : 0,
      rotate: isExploded ? -18 : 0,
    },
  };

  const transition = { type: "spring", damping: 16, stiffness: 90 };

  return (
    <div
      className="bg-card rounded-xl p-6 sm:p-8 shadow-lg flex flex-col"
      data-testid="module-product-deconstruction"
    >
      <h3
        className="text-2xl font-semibold text-card-foreground mb-4"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>
      <p
        className="text-muted-foreground mb-6"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-4 sm:p-8 mb-6 flex-grow min-h-[450px] flex items-center justify-center overflow-visible">
        <svg
          viewBox="-160 -210 320 400"
          className="w-full h-full max-w-[450px] max-h-[350px]"
          data-testid="chair-model"
          aria-labelledby="deconstruction-title"
        >
          <defs>
            <linearGradient
              id="finalWoodGrad"
              x1="0%"
              y1="0%"
              x2="80%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#b9936c" />
              <stop offset="50%" stopColor="#8b5e34" />
              <stop offset="100%" stopColor="#5a3d24" />
            </linearGradient>
            <linearGradient
              id="frontLegWoodGrad"
              x1="0%"
              y1="0%"
              x2="80%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#c29b74" />
              <stop offset="50%" stopColor="#91633a" />
              <stop offset="100%" stopColor="#604228" />
            </linearGradient>
            <filter
              id="finalShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="5"
                dy="8"
                stdDeviation="5"
                floodColor="#000"
                floodOpacity="0.2"
              />
            </filter>
            <clipPath id="seatClipPath">
              <ellipse cx="0" cy="20" rx="65" ry="22" />
            </clipPath>
          </defs>

          <motion.g
            animate={parts.backLoop}
            transition={transition}
            filter="url(#finalShadow)"
            data-testid="chair-part-backLoop"
          >
            <path
              d="M -50 165 C -45 50, -100 -150, 0 -150 C 100 -150, 45 50, 50 165"
              stroke="url(#finalWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.innerArch}
            transition={{ ...transition, delay: 0.15 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-innerArch"
          >
            <path
              d="M -48 -40 C -50 -90, 50 -90, 48 -40"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.ring}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-ring"
          >
            <ellipse
              cx="0"
              cy="50"
              rx="50"
              ry="15"
              stroke="url(#finalWoodGrad)"
              strokeWidth="11"
              fill="none"
            />
          </motion.g>

          <motion.g
            animate={parts.frontLegs}
            transition={{ ...transition, delay: 0.1 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-frontLegs"
          >
            <path
              d="M -45 25 C -45 80, -50 170, -50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 45 25 C 45 80, 50 170, 50 170"
              stroke="url(#frontLegWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seat}
            transition={{ ...transition, delay: 0.08 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-seat"
          >
            <ellipse
              cx="0"
              cy="20"
              rx="65"
              ry="22"
              fill="#f3e2c7"
              stroke="#5a3d24"
              strokeWidth="6"
            />
            <g clipPath="url(#seatClipPath)" opacity="0.5">
              {[...Array(16)].map((_, i) => (
                <path
                  key={`h${i}`}
                  d={`M -70 ${-4 + i * 2.8} C -30 ${-7 + i * 2.8}, 30 ${
                    -7 + i * 2.8
                  }, 70 ${-4 + i * 2.8}`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
              {[...Array(14)].map((_, i) => (
                <path
                  key={`v${i}`}
                  d={`M ${-65 + i * 10} -22 C ${-65 + i * 10} -15, ${
                    -65 + i * 10
                  } -15, ${-67 + i * 10} 45`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
            </g>
          </motion.g>
        </svg>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0, scale: isExploded ? 1 : 0.9 }}
          transition={{ duration: 0.4, delay: 0.2 }}
          className="absolute inset-0 pointer-events-none"
        >
          <div className="absolute top-[85%] left-[2%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.backFrameLabel")}
          </div>
          <div className="absolute top-[55%] right-[5%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.innerArchLabel")}
          </div>
          <div className="absolute top-[10%] right-[2%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.seatLabel")}
          </div>
          <div className="absolute top-[80%] right-[5%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.ringLabel")}
          </div>
          <div className="absolute top-[5%] left-[10%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.frontLegsLabel")}
          </div>
        </motion.div>
      </div>

      <div className="text-center mt-auto">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-primary text-primary-foreground font-semibold rounded-lg hover:bg-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background transition-all"
          aria-expanded={isExploded}
          aria-controls="chair-model"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>
        <p
          className="text-sm text-muted-foreground mt-3 px-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}

--------------------------

import { useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { useAriaLive } from "@/hooks/useAriaLive";

export function ProductDeconstruction() {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState(false);
  const { announce } = useAriaLive();

  const toggleDeconstruction = () => {
    const nextState = !isExploded;
    setIsExploded(nextState);

    const message = nextState
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    announce(message);
  };

  // Używamy prostszych animacji z oryginalnego pliku
  const parts = {
    backLoop: {
      y: isExploded ? -60 : 0,
      x: isExploded ? -80 : 0,
    },
    seat: {
      y: isExploded ? -20 : 0,
      x: isExploded ? 80 : 0,
    },
    frontLegs: {
      y: isExploded ? 80 : 0,
      x: isExploded ? -60 : 0,
    },
    frame: {
      y: isExploded ? 80 : 0,
      x: isExploded ? 60 : 0,
    },
  };

  const transition = { type: "spring", damping: 15, stiffness: 80 };

  return (
    <div
      className="bg-card rounded-xl p-6 sm:p-8 shadow-lg flex flex-col"
      data-testid="module-product-deconstruction"
    >
      <h3
        className="text-2xl font-semibold text-card-foreground mb-4"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>
      <p
        className="text-muted-foreground mb-6"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-4 sm:p-8 mb-6 flex-grow min-h-[450px] flex items-center justify-center overflow-visible">
        <div className="relative w-80 h-96">
          {/* Backrest */}
          <motion.div
            className="absolute top-8 left-1/2 -translate-x-1/2"
            animate={parts.backLoop}
            transition={transition}
          >
            <svg
              width="120"
              height="160"
              viewBox="0 0 120 160"
              className="drop-shadow-lg"
            >
              <path
                d="M 20 140 Q 20 20 60 10 Q 100 20 100 140"
                fill="#D2B48C"
                stroke="#8B4513"
                strokeWidth="2"
              />
            </svg>
          </motion.div>

          {/* Seat */}
          <motion.div
            className="absolute top-32 left-1/2 -translate-x-1/2"
            animate={parts.seat}
            transition={transition}
          >
            <svg
              width="100"
              height="100"
              viewBox="0 0 100 100"
              className="drop-shadow-lg"
            >
              <circle
                cx="50"
                cy="50"
                r="45"
                fill="#F5DEB3"
                stroke="#8B4513"
                strokeWidth="3"
              />
            </svg>
          </motion.div>

          {/* Front legs */}
          <motion.div
            className="absolute top-44 left-1/2 -translate-x-1/2"
            animate={parts.frontLegs}
            transition={transition}
          >
            <svg
              width="100"
              height="120"
              viewBox="0 0 100 120"
              className="drop-shadow-lg"
            >
              <rect
                x="15"
                y="10"
                width="8"
                height="100"
                rx="4"
                fill="#D2B48C"
                stroke="#8B4513"
                strokeWidth="2"
              />
              <rect
                x="77"
                y="10"
                width="8"
                height="100"
                rx="4"
                fill="#D2B48C"
                stroke="#8B4513"
                strokeWidth="2"
              />
            </svg>
          </motion.div>

          {/* Back legs and frame */}
          <motion.div
            className="absolute top-36 left-1/2 -translate-x-1/2"
            animate={parts.frame}
            transition={transition}
          >
            <svg
              width="120"
              height="140"
              viewBox="0 0 120 140"
              className="drop-shadow-lg"
            >
              <rect
                x="25"
                y="0"
                width="8"
                height="120"
                rx="4"
                fill="#D2B48C"
                stroke="#8B4513"
                strokeWidth="2"
              />
              <rect
                x="87"
                y="0"
                width="8"
                height="120"
                rx="4"
                fill="#D2B48C"
                stroke="#8B4513"
                strokeWidth="2"
              />
            </svg>
          </motion.div>
        </div>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          className="absolute inset-0 pointer-events-none"
        >
          <div className="absolute top-10 left-12 bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.backFrameLabel")}
          </div>
          <div className="absolute top-32 right-12 bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.seatLabel")}
          </div>
          <div className="absolute bottom-24 left-12 bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.frontLegsLabel")}
          </div>
          <div className="absolute bottom-24 right-12 bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.ringLabel")}
          </div>
        </motion.div>
      </div>

      <div className="text-center mt-auto">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-primary text-primary-foreground font-semibold rounded-lg hover:bg-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background transition-all"
          aria-expanded={isExploded}
          aria-controls="chair-model"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>
        <p
          className="text-sm text-muted-foreground mt-3 px-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}

----------------------------

import React, { useId, useEffect, useRef, useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";

export function ProductDeconstruction(): JSX.Element {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState<boolean>(false);
  const [announcement, setAnnouncement] = useState<string>("");
  const timeoutRef = useRef<number | null>(null);
  const id = useId();

  useEffect(() => {
    return () => {
      if (timeoutRef.current !== null) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  const toggleDeconstruction = (): void => {
    const next = !isExploded;
    setIsExploded(next);
    const message = next
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    setAnnouncement(message);
    if (timeoutRef.current !== null) {
      clearTimeout(timeoutRef.current);
    }
    timeoutRef.current = window.setTimeout(() => {
      setAnnouncement("");
      timeoutRef.current = null;
    }, 1000);
  };

  const parts = {
    backrest: { x: isExploded ? -80 : 0, y: isExploded ? -80 : 0 },
    seat: { x: isExploded ? 100 : 0, y: isExploded ? -20 : 0 },
    legs: { x: isExploded ? -70 : 0, y: isExploded ? 100 : 0 },
    frame: { x: isExploded ? 80 : 0, y: isExploded ? 100 : 0 },
  };

  const transition = {
    duration: 0.8,
    type: "spring",
    damping: 15,
    stiffness: 80,
  };

  return (
    <div
      className="bg-card rounded-xl p-8 shadow-lg"
      data-testid="module-product-deconstruction"
    >
      <div
        aria-live="polite"
        className="sr-only"
        data-testid="aria-announcements"
      >
        {announcement}
      </div>

      <h3
        className="text-2xl font-semibold text-card-foreground mb-6"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>

      <p
        className="text-muted-foreground mb-8"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-8 mb-8 min-h-[500px] flex items-center justify-center overflow-visible">
        <div className="relative w-80 h-80" data-testid="chair-model">
          <motion.div
            animate={{ x: parts.backrest.x, y: parts.backrest.y }}
            transition={transition}
            className="absolute top-6 left-1/2 transform -translate-x-1/2"
            data-testid="chair-part-backrest"
          >
            <svg
              width="120"
              height="160"
              viewBox="0 0 120 160"
              role="img"
              aria-label={t(
                "interactiveModules.productDeconstruction.backrestLabel"
              )}
            >
              <defs>
                <linearGradient
                  id={`woodGrad-${id}`}
                  x1="0%"
                  y1="0%"
                  x2="100%"
                  y2="100%"
                >
                  <stop offset="0%" stopColor="#D2B48C" />
                  <stop offset="50%" stopColor="#DEB887" />
                  <stop offset="100%" stopColor="#BC9A6A" />
                </linearGradient>
              </defs>
              <rect
                x="35"
                y="10"
                width="50"
                height="130"
                rx="25"
                fill={`url(#woodGrad-${id})`}
                stroke="#8B4513"
                strokeWidth="3"
              />
              <line
                x1="40"
                y1="30"
                x2="80"
                y2="30"
                stroke="#A0522D"
                strokeWidth="2"
                opacity="0.5"
              />
              <line
                x1="40"
                y1="60"
                x2="80"
                y2="60"
                stroke="#A0522D"
                strokeWidth="2"
                opacity="0.5"
              />
              <line
                x1="40"
                y1="90"
                x2="80"
                y2="90"
                stroke="#A0522D"
                strokeWidth="2"
                opacity="0.5"
              />
            </svg>
          </motion.div>

          <motion.div
            animate={{ x: parts.seat.x, y: parts.seat.y }}
            transition={transition}
            className="absolute top-32 left-1/2 transform -translate-x-1/2"
            data-testid="chair-part-seat"
          >
            <svg
              width="120"
              height="120"
              viewBox="0 0 120 120"
              role="img"
              aria-label={t(
                "interactiveModules.productDeconstruction.seatLabel"
              )}
            >
              <defs>
                <radialGradient id={`seatGrad-${id}`} cx="50%" cy="50%" r="50%">
                  <stop offset="0%" stopColor="#F5DEB3" />
                  <stop offset="70%" stopColor="#DEB887" />
                  <stop offset="100%" stopColor="#CD853F" />
                </radialGradient>
              </defs>
              <circle
                cx="60"
                cy="60"
                r="50"
                fill={`url(#seatGrad-${id})`}
                stroke="#8B4513"
                strokeWidth="4"
              />
              <g opacity="0.6">
                {Array.from({ length: 10 }).map((_, index) => (
                  <line
                    key={`h-${index}`}
                    x1="15"
                    y1={20 + index * 8}
                    x2="105"
                    y2={20 + index * 8}
                    stroke="#D2B48C"
                    strokeWidth="1.5"
                  />
                ))}
                {Array.from({ length: 10 }).map((_, index) => (
                  <line
                    key={`v-${index}`}
                    x1={20 + index * 8}
                    y1="15"
                    x2={20 + index * 8}
                    y2="105"
                    stroke="#DEB887"
                    strokeWidth="1.5"
                  />
                ))}
              </g>
            </svg>
          </motion.div>

          <motion.div
            animate={{ x: parts.legs.x, y: parts.legs.y }}
            transition={transition}
            className="absolute top-44 left-1/2 transform -translate-x-1/2"
            data-testid="chair-part-legs"
          >
            <svg
              width="120"
              height="140"
              viewBox="0 0 120 140"
              role="img"
              aria-label={t(
                "interactiveModules.productDeconstruction.frontLegsLabel"
              )}
            >
              <defs>
                <linearGradient
                  id={`woodGrad-${id}-legs`}
                  x1="0%"
                  y1="0%"
                  x2="100%"
                  y2="100%"
                >
                  <stop offset="0%" stopColor="#D2B48C" />
                  <stop offset="50%" stopColor="#DEB887" />
                  <stop offset="100%" stopColor="#BC9A6A" />
                </linearGradient>
              </defs>
              <rect
                x="25"
                y="20"
                width="10"
                height="110"
                rx="5"
                fill={`url(#woodGrad-${id}-legs)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
              <rect
                x="85"
                y="20"
                width="10"
                height="110"
                rx="5"
                fill={`url(#woodGrad-${id}-legs)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
              <rect
                x="25"
                y="100"
                width="70"
                height="8"
                rx="4"
                fill={`url(#woodGrad-${id}-legs)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
              <line
                x1="29"
                y1="25"
                x2="29"
                y2="115"
                stroke="#A0522D"
                strokeWidth="0.5"
                opacity="0.7"
              />
              <line
                x1="89"
                y1="25"
                x2="89"
                y2="115"
                stroke="#A0522D"
                strokeWidth="0.5"
                opacity="0.7"
              />
            </svg>
          </motion.div>

          <motion.div
            animate={{ x: parts.frame.x, y: parts.frame.y }}
            transition={transition}
            className="absolute top-36 left-1/2 transform -translate-x-1/2"
            data-testid="chair-part-frame"
          >
            <svg
              width="140"
              height="160"
              viewBox="0 0 140 160"
              role="img"
              aria-label={t(
                "interactiveModules.productDeconstruction.frameLabel"
              )}
            >
              <defs>
                <linearGradient
                  id={`woodGrad-${id}-frame`}
                  x1="0%"
                  y1="0%"
                  x2="100%"
                  y2="100%"
                >
                  <stop offset="0%" stopColor="#D2B48C" />
                  <stop offset="50%" stopColor="#DEB887" />
                  <stop offset="100%" stopColor="#BC9A6A" />
                </linearGradient>
              </defs>
              <rect
                x="35"
                y="10"
                width="10"
                height="130"
                rx="5"
                fill={`url(#woodGrad-${id}-frame)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
              <rect
                x="95"
                y="10"
                width="10"
                height="130"
                rx="5"
                fill={`url(#woodGrad-${id}-frame)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
              <ellipse
                cx="70"
                cy="50"
                rx="45"
                ry="10"
                fill="none"
                stroke="#8B4513"
                strokeWidth="4"
              />
              <rect
                x="35"
                y="80"
                width="70"
                height="8"
                rx="4"
                fill={`url(#woodGrad-${id}-frame)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
            </svg>
          </motion.div>
        </div>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          className="absolute inset-0 pointer-events-none"
          data-testid="component-labels"
        >
          <div className="absolute top-4 left-8 bg-background text-foreground px-3 py-2 rounded-md text-sm shadow-lg border font-medium">
            Oparcie
          </div>
          <div className="absolute top-28 right-8 bg-background text-foreground px-3 py-2 rounded-md text-sm shadow-lg border font-medium">
            Siedzisko
          </div>
          <div className="absolute bottom-16 left-8 bg-background text-foreground px-3 py-2 rounded-md text-sm shadow-lg border font-medium">
            Nogi przednie
          </div>
          <div className="absolute bottom-16 right-8 bg-background text-foreground px-3 py-2 rounded-md text-sm shadow-lg border font-medium">
            Stelaż
          </div>
        </motion.div>
      </div>

      <div className="text-center">
        <button
          onClick={toggleDeconstruction}
          className="px-6 py-3 bg-primary text-primary-foreground font-medium rounded-md hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-ring transition-all"
          aria-expanded={isExploded}
          aria-describedby="chair-description"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>

        <p
          id="chair-description"
          className="text-sm text-muted-foreground mt-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}

-------------------------------

import React, { useId, useEffect, useRef, useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";

export function ProductDeconstruction(): JSX.Element {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState<boolean>(false);
  const [announcement, setAnnouncement] = useState<string>("");
  const timeoutRef = useRef<number | null>(null);
  const id = useId();

  useEffect(() => {
    return () => {
      if (timeoutRef.current !== null) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  const toggleDeconstruction = (): void => {
    const next = !isExploded;
    setIsExploded(next);
    const message = next
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    setAnnouncement(message);
    if (timeoutRef.current !== null) {
      clearTimeout(timeoutRef.current);
    }
    timeoutRef.current = window.setTimeout(() => {
      setAnnouncement("");
      timeoutRef.current = null;
    }, 1000);
  };

  const parts = {
    backrest: { x: isExploded ? -80 : 0, y: isExploded ? -80 : 0 },
    seat: { x: isExploded ? 100 : 0, y: isExploded ? -20 : 0 },
    legs: { x: isExploded ? -70 : 0, y: isExploded ? 100 : 0 },
    frame: { x: isExploded ? 80 : 0, y: isExploded ? 100 : 0 },
  };

  const transition = {
    duration: 0.8,
    type: "spring",
    damping: 15,
    stiffness: 80,
  };

  return (
    <div
      className="bg-card rounded-xl p-8 shadow-lg"
      data-testid="module-product-deconstruction"
    >
      <div
        aria-live="polite"
        className="sr-only"
        data-testid="aria-announcements"
      >
        {announcement}
      </div>

      <h3
        className="text-2xl font-semibold text-card-foreground mb-6"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>

      <p
        className="text-muted-foreground mb-8"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-8 mb-8 min-h-[500px] flex items-center justify-center overflow-visible">
        <div className="relative w-80 h-80" data-testid="chair-model">
          <motion.div
            animate={{ x: parts.backrest.x, y: parts.backrest.y }}
            transition={transition}
            className="absolute top-6 left-1/2 transform -translate-x-1/2"
            data-testid="chair-part-backrest"
          >
            <svg
              width="120"
              height="160"
              viewBox="0 0 120 160"
              role="img"
              aria-label={t(
                "interactiveModules.productDeconstruction.backrestLabel"
              )}
            >
              <defs>
                <linearGradient
                  id={`woodGrad-${id}`}
                  x1="0%"
                  y1="0%"
                  x2="100%"
                  y2="100%"
                >
                  <stop offset="0%" stopColor="#D2B48C" />
                  <stop offset="50%" stopColor="#DEB887" />
                  <stop offset="100%" stopColor="#BC9A6A" />
                </linearGradient>
              </defs>
              <rect
                x="35"
                y="10"
                width="50"
                height="130"
                rx="25"
                fill={`url(#woodGrad-${id})`}
                stroke="#8B4513"
                strokeWidth="3"
              />
              <line
                x1="40"
                y1="30"
                x2="80"
                y2="30"
                stroke="#A0522D"
                strokeWidth="2"
                opacity="0.5"
              />
              <line
                x1="40"
                y1="60"
                x2="80"
                y2="60"
                stroke="#A0522D"
                strokeWidth="2"
                opacity="0.5"
              />
              <line
                x1="40"
                y1="90"
                x2="80"
                y2="90"
                stroke="#A0522D"
                strokeWidth="2"
                opacity="0.5"
              />
            </svg>
          </motion.div>

          <motion.div
            animate={{ x: parts.seat.x, y: parts.seat.y }}
            transition={transition}
            className="absolute top-32 left-1/2 transform -translate-x-1/2"
            data-testid="chair-part-seat"
          >
            <svg
              width="120"
              height="120"
              viewBox="0 0 120 120"
              role="img"
              aria-label={t(
                "interactiveModules.productDeconstruction.seatLabel"
              )}
            >
              <defs>
                <radialGradient id={`seatGrad-${id}`} cx="50%" cy="50%" r="50%">
                  <stop offset="0%" stopColor="#F5DEB3" />
                  <stop offset="70%" stopColor="#DEB887" />
                  <stop offset="100%" stopColor="#CD853F" />
                </radialGradient>
              </defs>
              <circle
                cx="60"
                cy="60"
                r="50"
                fill={`url(#seatGrad-${id})`}
                stroke="#8B4513"
                strokeWidth="4"
              />
              <g opacity="0.6">
                {Array.from({ length: 10 }).map((_, index) => (
                  <line
                    key={`h-${index}`}
                    x1="15"
                    y1={20 + index * 8}
                    x2="105"
                    y2={20 + index * 8}
                    stroke="#D2B48C"
                    strokeWidth="1.5"
                  />
                ))}
                {Array.from({ length: 10 }).map((_, index) => (
                  <line
                    key={`v-${index}`}
                    x1={20 + index * 8}
                    y1="15"
                    x2={20 + index * 8}
                    y2="105"
                    stroke="#DEB887"
                    strokeWidth="1.5"
                  />
                ))}
              </g>
            </svg>
          </motion.div>

          <motion.div
            animate={{ x: parts.legs.x, y: parts.legs.y }}
            transition={transition}
            className="absolute top-44 left-1/2 transform -translate-x-1/2"
            data-testid="chair-part-legs"
          >
            <svg
              width="120"
              height="140"
              viewBox="0 0 120 140"
              role="img"
              aria-label={t(
                "interactiveModules.productDeconstruction.frontLegsLabel"
              )}
            >
              <defs>
                <linearGradient
                  id={`woodGrad-${id}-legs`}
                  x1="0%"
                  y1="0%"
                  x2="100%"
                  y2="100%"
                >
                  <stop offset="0%" stopColor="#D2B48C" />
                  <stop offset="50%" stopColor="#DEB887" />
                  <stop offset="100%" stopColor="#BC9A6A" />
                </linearGradient>
              </defs>
              <rect
                x="25"
                y="20"
                width="10"
                height="110"
                rx="5"
                fill={`url(#woodGrad-${id}-legs)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
              <rect
                x="85"
                y="20"
                width="10"
                height="110"
                rx="5"
                fill={`url(#woodGrad-${id}-legs)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
              <rect
                x="25"
                y="100"
                width="70"
                height="8"
                rx="4"
                fill={`url(#woodGrad-${id}-legs)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
              <line
                x1="29"
                y1="25"
                x2="29"
                y2="115"
                stroke="#A0522D"
                strokeWidth="0.5"
                opacity="0.7"
              />
              <line
                x1="89"
                y1="25"
                x2="89"
                y2="115"
                stroke="#A0522D"
                strokeWidth="0.5"
                opacity="0.7"
              />
            </svg>
          </motion.div>

          <motion.div
            animate={{ x: parts.frame.x, y: parts.frame.y }}
            transition={transition}
            className="absolute top-36 left-1/2 transform -translate-x-1/2"
            data-testid="chair-part-frame"
          >
            <svg
              width="140"
              height="160"
              viewBox="0 0 140 160"
              role="img"
              aria-label={t(
                "interactiveModules.productDeconstruction.frameLabel"
              )}
            >
              <defs>
                <linearGradient
                  id={`woodGrad-${id}-frame`}
                  x1="0%"
                  y1="0%"
                  x2="100%"
                  y2="100%"
                >
                  <stop offset="0%" stopColor="#D2B48C" />
                  <stop offset="50%" stopColor="#DEB887" />
                  <stop offset="100%" stopColor="#BC9A6A" />
                </linearGradient>
              </defs>
              <rect
                x="35"
                y="10"
                width="10"
                height="130"
                rx="5"
                fill={`url(#woodGrad-${id}-frame)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
              <rect
                x="95"
                y="10"
                width="10"
                height="130"
                rx="5"
                fill={`url(#woodGrad-${id}-frame)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
              <ellipse
                cx="70"
                cy="50"
                rx="45"
                ry="10"
                fill="none"
                stroke="#8B4513"
                strokeWidth="4"
              />
              <rect
                x="35"
                y="80"
                width="70"
                height="8"
                rx="4"
                fill={`url(#woodGrad-${id}-frame)`}
                stroke="#8B4513"
                strokeWidth="2"
              />
            </svg>
          </motion.div>
        </div>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          className="absolute inset-0 pointer-events-none"
          data-testid="component-labels"
        >
          <div className="absolute top-4 left-8 bg-background text-foreground px-3 py-2 rounded-md text-sm shadow-lg border font-medium">
            Oparcie
          </div>
          <div className="absolute top-28 right-8 bg-background text-foreground px-3 py-2 rounded-md text-sm shadow-lg border font-medium">
            Siedzisko
          </div>
          <div className="absolute bottom-16 left-8 bg-background text-foreground px-3 py-2 rounded-md text-sm shadow-lg border font-medium">
            Nogi przednie
          </div>
          <div className="absolute bottom-16 right-8 bg-background text-foreground px-3 py-2 rounded-md text-sm shadow-lg border font-medium">
            Stelaż
          </div>
        </motion.div>
      </div>

      <div className="text-center">
        <button
          onClick={toggleDeconstruction}
          className="px-6 py-3 bg-primary text-primary-foreground font-medium rounded-md hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-ring transition-all"
          aria-expanded={isExploded}
          aria-describedby="chair-description"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>

        <p
          id="chair-description"
          className="text-sm text-muted-foreground mt-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}

-------------------------------

import { useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { useAriaLive } from "@/hooks/useAriaLive";

export function ProductDeconstruction() {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState(false);
  const { announce } = useAriaLive();

  const toggleDeconstruction = () => {
    const nextState = !isExploded;
    setIsExploded(nextState);

    const message = nextState
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    announce(message);
  };

  const parts = {
    backLoop: {
      y: isExploded ? 110 : 0,
      x: isExploded ? -75 : 0,
      rotate: isExploded ? -12 : 0,
    },
    innerArch: {
      y: isExploded ? 25 : 0,
      x: isExploded ? 95 : 0,
      rotate: isExploded ? 25 : 0,
    },
    seat: {
      y: isExploded ? -150 : 0,
      x: isExploded ? 95 : 0,
      rotate: isExploded ? 15 : 0,
    },
    ring: {
      y: isExploded ? 60 : 0,
      x: isExploded ? 90 : 0,
      rotate: isExploded ? 10 : 0,
    },
    frontLegs: {
      y: isExploded ? -220 : 0,
      x: isExploded ? -50 : 0,
      rotate: isExploded ? -18 : 0,
    },
  };

  const transition = { type: "spring", damping: 16, stiffness: 90 };

  return (
    <div
      className="bg-card rounded-xl p-6 sm:p-8 shadow-lg flex flex-col"
      data-testid="module-product-deconstruction"
    >
      <h3
        className="text-2xl font-semibold text-card-foreground mb-4"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>
      <p
        className="text-muted-foreground mb-6"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-4 sm:p-8 mb-6 flex-grow min-h-[450px] flex items-center justify-center overflow-visible">
        <svg
          viewBox="-160 -210 320 400"
          className="w-full h-full max-w-[450px] max-h-[350px]"
          data-testid="chair-model"
          aria-labelledby="deconstruction-title"
        >
          <defs>
            <linearGradient
              id="finalWoodGrad"
              x1="0%"
              y1="0%"
              x2="80%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#b9936c" />
              <stop offset="50%" stopColor="#8b5e34" />
              <stop offset="100%" stopColor="#5a3d24" />
            </linearGradient>
            <filter
              id="finalShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="5"
                dy="8"
                stdDeviation="5"
                floodColor="#000"
                floodOpacity="0.2"
              />
            </filter>
            <clipPath id="seatClipPath">
              <ellipse cx="0" cy="20" rx="65" ry="22" />
            </clipPath>
          </defs>

          <motion.g
            animate={parts.backLoop}
            transition={transition}
            filter="url(#finalShadow)"
            data-testid="chair-part-backLoop"
          >
            <path
              d="M -50 170 C -45 50, -100 -150, 0 -150 C 100 -150, 45 50, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.innerArch}
            transition={{ ...transition, delay: 0.15 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-innerArch"
          >
            <path
              d="M -48 -40 C -50 -90, 50 -90, 48 -40"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.ring}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-ring"
          >
            <ellipse
              cx="0"
              cy="50"
              rx="50"
              ry="15"
              stroke="url(#finalWoodGrad)"
              strokeWidth="11"
              fill="none"
            />
          </motion.g>

          <motion.g
            animate={parts.frontLegs}
            transition={{ ...transition, delay: 0.1 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-frontLegs"
          >
            <path
              d="M -45 25 C -45 80, -50 170, -50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 45 25 C 45 80, 50 170, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seat}
            transition={{ ...transition, delay: 0.08 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-seat"
          >
            <ellipse
              cx="0"
              cy="20"
              rx="65"
              ry="22"
              fill="#f3e2c7"
              stroke="#5a3d24"
              strokeWidth="6"
            />
            <g clipPath="url(#seatClipPath)" opacity="0.5">
              {[...Array(16)].map((_, i) => (
                <path
                  key={`h${i}`}
                  d={`M -70 ${-4 + i * 2.8} C -30 ${-7 + i * 2.8}, 30 ${
                    -7 + i * 2.8
                  }, 70 ${-4 + i * 2.8}`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
              {[...Array(14)].map((_, i) => (
                <path
                  key={`v${i}`}
                  d={`M ${-65 + i * 10} -22 C ${-65 + i * 10} -15, ${
                    -65 + i * 10
                  } -15, ${-67 + i * 10} 45`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
            </g>
          </motion.g>
        </svg>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0, scale: isExploded ? 1 : 0.9 }}
          transition={{ duration: 0.4, delay: 0.2 }}
          className="absolute inset-0 pointer-events-none"
        >
          <div className="absolute top-[85%] left-[2%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.backFrameLabel")}
          </div>
          <div className="absolute top-[55%] right-[5%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.innerArchLabel")}
          </div>
          <div className="absolute top-[10%] right-[2%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.seatLabel")}
          </div>
          <div className="absolute top-[80%] right-[5%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.ringLabel")}
          </div>
          <div className="absolute top-[5%] left-[10%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.frontLegsLabel")}
          </div>
        </motion.div>
      </div>

      <div className="text-center mt-auto">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-primary text-primary-foreground font-semibold rounded-lg hover:bg-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background transition-all"
          aria-expanded={isExploded}
          aria-controls="chair-model"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>
        <p
          className="text-sm text-muted-foreground mt-3 px-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}


---------------------------------

import { useState } from "react";

type ChairPart =
  | "backFrame"
  | "seat"
  | "frontLegs"
  | "backLegs"
  | "supportRing"
  | "armrests";

export function ProductDeconstruction() {
  const [isExploded, setIsExploded] = useState(false);

  const toggleDeconstruction = () => {
    setIsExploded((prev) => !prev);
  };

  const getPartStyle = (part: ChairPart) => {
    if (!isExploded) {
      return {
        transform: "translate(0px, 0px) rotate(0deg)",
        transition: "all 1.2s cubic-bezier(0.34, 1.56, 0.64, 1)",
      };
    }

    const transforms: Record<ChairPart, string> = {
      backFrame: "translate(-120px, -100px) rotate(-15deg)",
      seat: "translate(80px, -120px) rotate(20deg)",
      frontLegs: "translate(-60px, -180px) rotate(-25deg)",
      backLegs: "translate(100px, 60px) rotate(30deg)",
      supportRing: "translate(140px, -40px) rotate(25deg)",
      armrests: "translate(-80px, -200px) rotate(-20deg)",
    };

    return {
      transform: transforms[part],
      transition: "all 1.2s cubic-bezier(0.34, 1.56, 0.64, 1)",
    };
  };

  return (
    <div className="bg-white rounded-xl p-6 sm:p-8 shadow-lg flex flex-col border">
      <h3 className="text-2xl font-semibold text-gray-900 mb-4">
        Krzesło Thonet nr 14 - Dekonstrukcja
      </h3>
      <p className="text-gray-600 mb-6">
        Kultowe krzesło wiedeńskie z 1859 roku, wykonane z gięcia drewna
        bukowego na parze. Kliknij przycisk aby zobaczyć jego konstrukcję.
      </p>

      <div className="relative bg-gray-100 rounded-lg p-8 mb-6 flex-grow min-h-[600px] flex items-center justify-center overflow-visible">
        <svg
          viewBox="-300 -350 600 700"
          className="w-full h-full max-w-[500px] max-h-[500px]"
          style={{ overflow: "visible" }}
        >
          <defs>
            <linearGradient
              id="bentWoodGrad"
              x1="0%"
              y1="0%"
              x2="100%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#d4a574" />
              <stop offset="30%" stopColor="#b8956a" />
              <stop offset="70%" stopColor="#8b6f47" />
              <stop offset="100%" stopColor="#6b4423" />
            </linearGradient>
            <linearGradient id="seatGrad" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#f5e6d3" />
              <stop offset="50%" stopColor="#e8d4bb" />
              <stop offset="100%" stopColor="#d4a574" />
            </linearGradient>
            <filter
              id="woodShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="4"
                dy="6"
                stdDeviation="4"
                floodColor="#000"
                floodOpacity="0.25"
              />
            </filter>
            <pattern
              id="caningPattern"
              patternUnits="userSpaceOnUse"
              width="8"
              height="8"
            >
              <rect width="8" height="8" fill="#f5e6d3" />
              <path
                d="M0,0 L8,8 M0,8 L8,0"
                stroke="#d4a574"
                strokeWidth="0.8"
              />
            </pattern>
          </defs>

          <g
            style={{
              ...getPartStyle("backFrame"),
              transitionDelay: "0ms",
            }}
            filter="url(#woodShadow)"
          >
            <path
              d="M -60 280
                 C -60 220, -45 180, -45 140
                 C -45 100, -55 60, -55 20
                 C -55 -40, -45 -80, -30 -120
                 C -15 -160, 0 -180, 0 -180
                 C 0 -180, 15 -160, 30 -120
                 C 45 -80, 55 -40, 55 20
                 C 55 60, 45 100, 45 140
                 C 45 180, 60 220, 60 280"
              stroke="url(#bentWoodGrad)"
              strokeWidth="16"
              fill="none"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </g>

          <g
            style={{
              ...getPartStyle("frontLegs"),
              transitionDelay: "100ms",
            }}
            filter="url(#woodShadow)"
          >
            <path
              d="M -45 50 C -50 100, -55 200, -60 280"
              stroke="url(#bentWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 45 50 C 50 100, 55 200, 60 280"
              stroke="url(#bentWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
          </g>

          <g
            style={{
              ...getPartStyle("supportRing"),
              transitionDelay: "200ms",
            }}
            filter="url(#woodShadow)"
          >
            <ellipse
              cx="0"
              cy="120"
              rx="55"
              ry="18"
              stroke="url(#bentWoodGrad)"
              strokeWidth="12"
              fill="none"
            />
          </g>

          <g
            style={{
              ...getPartStyle("seat"),
              transitionDelay: "300ms",
            }}
            filter="url(#woodShadow)"
          >
            <ellipse
              cx="0"
              cy="50"
              rx="70"
              ry="65"
              fill="url(#caningPattern)"
              stroke="url(#bentWoodGrad)"
              strokeWidth="8"
            />
            <ellipse
              cx="0"
              cy="50"
              rx="60"
              ry="55"
              fill="none"
              stroke="url(#bentWoodGrad)"
              strokeWidth="3"
              opacity="0.6"
            />
          </g>

          <g
            style={{
              ...getPartStyle("backLegs"),
              transitionDelay: "150ms",
            }}
            filter="url(#woodShadow)"
          >
            <path
              d="M -55 140 C -58 180, -60 220, -60 280"
              stroke="url(#bentWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 55 140 C 58 180, 60 220, 60 280"
              stroke="url(#bentWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
          </g>

          <g
            style={{
              ...getPartStyle("armrests"),
              transitionDelay: "250ms",
            }}
            filter="url(#woodShadow)"
          >
            <path
              d="M -45 -20 C -70 -10, -85 10, -80 30 C -75 50, -65 60, -50 65"
              stroke="url(#bentWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 45 -20 C 70 -10, 85 10, 80 30 C 75 50, 65 60, 50 65"
              stroke="url(#bentWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </g>
        </svg>

        {isExploded && (
          <div
            className="absolute inset-0 pointer-events-none"
            style={{
              opacity: isExploded ? 1 : 0,
              transition: "opacity 0.5s ease-in-out 0.8s",
            }}
          >
            <div className="absolute top-[8%] left-[8%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              Gięta rama oparcia
            </div>
            <div className="absolute top-[35%] right-[5%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              Siedzisko z plecionką
            </div>
            <div className="absolute top-[5%] left-[20%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              Przednie nogi
            </div>
            <div className="absolute top-[55%] right-[15%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              Tylne nogi
            </div>
            <div className="absolute top-[45%] right-[8%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              Pierścień wzmacniający
            </div>
            <div className="absolute top-[12%] left-[25%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              Podłokietniki
            </div>
          </div>
        )}
      </div>

      <div className="text-center">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-amber-700 text-white font-semibold rounded-lg hover:bg-amber-800 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 transition-all transform hover:scale-105 active:scale-95"
        >
          {isExploded ? "Złóż krzesło Thonet" : "Rozłóż krzesło Thonet"}
        </button>
        <p className="text-sm text-gray-600 mt-3 px-4">
          <strong>
            {isExploded ? "ELEMENTY ROZŁOŻONE" : "KRZESŁO ZŁOŻONE"}
          </strong>
        </p>
        <p className="text-xs text-gray-500 mt-2">
          Michael Thonet, 1859 • Gięte drewno bukowe • Siedzisko z plecionki
          wiedeńskiej
        </p>
      </div>
    </div>
  );
}


--------------------------------

import { useState } from "react";

// Zaktualizowano typ, usuwając "backLegs" jako osobny element
type ChairPart =
  | "backFrame"
  | "seat"
  | "frontLegs"
  | "supportRing"
  | "armrests";

export function ProductDeconstruction() {
  const [isExploded, setIsExploded] = useState(false);

  const toggleDeconstruction = () => {
    setIsExploded((prev) => !prev);
  };

  const getPartStyle = (part: ChairPart) => {
    if (!isExploded) {
      return {
        transform: "translate(0px, 0px) rotate(0deg)",
        transition: "all 1.2s cubic-bezier(0.34, 1.56, 0.64, 1)",
      };
    }

    // Dopasowano wartości transformacji do nowego, lepszego modelu
    const transforms: Record<ChairPart, string> = {
      backFrame: "translate(-100px, 50px) rotate(-12deg)",
      seat: "translate(0px, -150px) rotate(10deg)",
      frontLegs: "translate(-80px, 120px) rotate(-20deg)",
      supportRing: "translate(110px, 100px) rotate(25deg)",
      armrests: "translate(120px, -50px) rotate(15deg)",
    };

    return {
      transform: transforms[part],
      transition: "all 1.2s cubic-bezier(0.34, 1.56, 0.64, 1)",
    };
  };

  return (
    <div className="bg-white rounded-xl p-6 sm:p-8 shadow-lg flex flex-col border">
      <h3 className="text-2xl font-semibold text-gray-900 mb-4">
        Krzesło Thonet nr 14 - Dekonstrukcja
      </h3>
      <p className="text-gray-600 mb-6">
        Kultowe krzesło wiedeńskie z 1859 roku, wykonane z gięcia drewna
        bukowego na parze. Kliknij przycisk aby zobaczyć jego konstrukcję.
      </p>

      <div className="relative bg-gray-100 rounded-lg p-8 mb-6 flex-grow min-h-[600px] flex items-center justify-center overflow-visible">
        <svg
          viewBox="-250 -300 500 600"
          className="w-full h-full max-w-[450px] max-h-[450px]"
          style={{ overflow: "visible" }}
        >
          <defs>
            <linearGradient
              id="bentWoodGrad"
              x1="0%"
              y1="0%"
              x2="100%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#c5a075" />
              <stop offset="50%" stopColor="#8b5e34" />
              <stop offset="100%" stopColor="#5a3d24" />
            </linearGradient>
            <filter
              id="woodShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="5"
                dy="8"
                stdDeviation="6"
                floodColor="#000000"
                floodOpacity="0.2"
              />
            </filter>
            {/* Ulepszony, bardziej realistyczny wzór plecionki wiedeńskiej */}
            <pattern
              id="caningPattern"
              patternUnits="userSpaceOnUse"
              width="12"
              height="12"
              patternTransform="rotate(45)"
            >
              <rect width="12" height="12" fill="#f3e2c7" />
              <path d="M0 6 H12 M6 0 V12" stroke="#d4a574" strokeWidth="0.7" />
              <path
                d="M0 0 L12 12 M0 12 L12 0"
                stroke="#d4a574"
                strokeWidth="0.5"
                opacity="0.7"
              />
            </pattern>
          </defs>

          {/* Główna rama oparcia i tylne nogi jako jeden element */}
          <g
            style={{
              ...getPartStyle("backFrame"),
              transitionDelay: "0ms",
            }}
            filter="url(#woodShadow)"
          >
            <path
              d="M 0 -170 C 120 -170, 80 80, 80 250 M 0 -170 C -120 -170, -80 80, -80 250 M -60 -80 C -60 -130, 60 -130, 60 -80"
              stroke="url(#bentWoodGrad)"
              strokeWidth="18"
              fill="none"
              strokeLinecap="round"
            />
          </g>

          {/* Przednie nogi */}
          <g
            style={{
              ...getPartStyle("frontLegs"),
              transitionDelay: "150ms",
            }}
            filter="url(#woodShadow)"
          >
            <path
              d="M -70 250 C -70 150, -50 40, -50 40"
              stroke="url(#bentWoodGrad)"
              strokeWidth="16"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 70 250 C 70 150, 50 40, 50 40"
              stroke="url(#bentWoodGrad)"
              strokeWidth="16"
              fill="none"
              strokeLinecap="round"
            />
          </g>

          {/* Pierścień wzmacniający */}
          <g
            style={{
              ...getPartStyle("supportRing"),
              transitionDelay: "200ms",
            }}
            filter="url(#woodShadow)"
          >
            <ellipse
              cx="0"
              cy="120"
              rx="70"
              ry="25"
              stroke="url(#bentWoodGrad)"
              strokeWidth="14"
              fill="none"
              transform="rotate(2)"
            />
          </g>

          {/* Opcjonalne podłokietniki, jeśli chcesz je dodać */}
          {/* <g style={getPartStyle("armrests")} filter="url(#woodShadow)">
            <path d="..." />
          </g> */}

          {/* Siedzisko z nową plecionką */}
          <g
            style={{
              ...getPartStyle("seat"),
              transitionDelay: "50ms",
            }}
            filter="url(#woodShadow)"
          >
            <ellipse
              cx="0"
              cy="40"
              rx="90"
              ry="80"
              fill="url(#caningPattern)"
              stroke="url(#bentWoodGrad)"
              strokeWidth="12"
            />
          </g>
        </svg>

        {/* Etykiety, z dopasowanymi pozycjami */}
        {isExploded && (
          <div
            className="absolute inset-0 pointer-events-none"
            style={{
              opacity: isExploded ? 1 : 0,
              transition: "opacity 0.5s ease-in-out 0.8s",
            }}
          >
            <div className="absolute top-[35%] left-[5%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              Rama oparcia i tylne nogi
            </div>
            <div className="absolute top-[10%] right-[25%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              Siedzisko z plecionką
            </div>
            <div className="absolute bottom-[8%] left-[12%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              Przednie nogi
            </div>
            <div className="absolute bottom-[15%] right-[5%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              Pierścień wzmacniający
            </div>
          </div>
        )}
      </div>

      <div className="text-center">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-amber-700 text-white font-semibold rounded-lg hover:bg-amber-800 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 transition-all transform hover:scale-105 active:scale-95"
        >
          {isExploded ? "Złóż krzesło" : "Rozłóż krzesło"}
        </button>
        <p className="text-sm text-gray-600 mt-3 px-4">
          <strong>
            {isExploded ? "ELEMENTY ROZŁOŻONE" : "KRZESŁO ZŁOŻONE"}
          </strong>
        </p>
        <p className="text-xs text-gray-500 mt-2">
          Michael Thonet, 1859 • Gięte drewno bukowe • Siedzisko z plecionki
          wiedeńskiej
        </p>
      </div>
    </div>
  );
}

---------------------------kanciaste oparcie------------------
import { useState } from "react";
import { useTranslation } from "react-i18next";

type ChairPart =
  | "backLegsAndFrame"
  | "innerArch"
  | "seat"
  | "frontLegs"
  | "supportRing";

export function ProductDeconstruction() {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState(false);

  const toggleDeconstruction = () => {
    setIsExploded((prev) => !prev);
  };

  const getPartStyle = (part: ChairPart) => {
    const commonTransition = "transform 1.2s cubic-bezier(0.34, 1.56, 0.64, 1)";
    if (!isExploded) {
      return {
        transform: "translate3d(0, 0, 0) rotate(0deg)",
        transition: commonTransition,
      };
    }
    const transforms: Record<ChairPart, string> = {
      backLegsAndFrame: "translate3d(-90px, -80px, 0) rotate(-10deg)",
      innerArch: "translate3d(-10px, -50px, 0) rotate(-3deg)",
      seat: "translate3d(0px, -160px, 0) rotate(8deg)",
      frontLegs: "translate3d(80px, 90px, 0) rotate(12deg)",
      supportRing: "translate3d(0px, 150px, 0) rotate(4deg)",
    };
    return {
      transform: transforms[part],
      transition: commonTransition,
    };
  };

  return (
    <div className="bg-white rounded-xl p-6 sm:p-8 shadow-lg flex flex-col border">
      <h3 className="text-2xl font-semibold text-gray-900 mb-4">
        {t("interactiveModules.productDeconstruction.title")}
      </h3>
      <p className="text-gray-600 mb-6">
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-gray-100 rounded-lg p-8 mb-6 flex-grow min-h-[600px] flex items-center justify-center overflow-visible">
        <svg
          viewBox="-250 -300 500 600"
          className="w-full h-full max-w-[450px] max-h-[450px]"
          style={{ overflow: "visible" }}
        >
          <defs>
            <linearGradient
              id="bentWoodGrad"
              x1="0%"
              y1="0%"
              x2="100%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#c5a075" />
              <stop offset="50%" stopColor="#8b5e34" />
              <stop offset="100%" stopColor="#5a3d24" />
            </linearGradient>
            <filter
              id="woodShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="6"
                dy="9"
                stdDeviation="6"
                floodColor="#000000"
                floodOpacity="0.2"
              />
            </filter>
            <pattern
              id="caningPattern"
              patternUnits="userSpaceOnUse"
              width="10"
              height="10"
              patternTransform="rotate(45)"
            >
              <rect width="10" height="10" fill="#f3e2c7" />
              <path d="M0 5 H10 M5 0 V10" stroke="#d4a574" strokeWidth="0.6" />
              <path
                d="M0 0 L10 10 M0 10 L10 0"
                stroke="#d4a574"
                strokeWidth="0.4"
                opacity="0.6"
              />
            </pattern>
          </defs>

          <g
            style={{
              ...getPartStyle("backLegsAndFrame"),
              transitionDelay: "0ms",
            }}
            filter="url(#woodShadow)"
          >
            <path
              d="M -60 280 C -60 150, -90 -40, -70 -180 C -40 -220, 40 -220, 70 -180 C 90 -40, 60 150, 60 280"
              stroke="url(#bentWoodGrad)"
              strokeWidth="18"
              fill="none"
              strokeLinecap="round"
            />
          </g>

          <g
            style={{ ...getPartStyle("innerArch"), transitionDelay: "50ms" }}
            filter="url(#woodShadow)"
          >
            <path
              d="M -55 -120 C -40 -170, 40 -170, 55 -120"
              stroke="url(#bentWoodGrad)"
              strokeWidth="16"
              fill="none"
              strokeLinecap="round"
            />
          </g>

          <g
            style={{ ...getPartStyle("supportRing"), transitionDelay: "200ms" }}
            filter="url(#woodShadow)"
          >
            <ellipse
              cx="0"
              cy="140"
              rx="75"
              ry="28"
              stroke="url(#bentWoodGrad)"
              strokeWidth="15"
              fill="none"
            />
          </g>

          <g
            style={{ ...getPartStyle("frontLegs"), transitionDelay: "150ms" }}
            filter="url(#woodShadow)"
          >
            <path
              d="M -70 280 C -70 180, -70 100, -65 40"
              stroke="url(#bentWoodGrad)"
              strokeWidth="17"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 70 280 C 70 180, 70 100, 65 40"
              stroke="url(#bentWoodGrad)"
              strokeWidth="17"
              fill="none"
              strokeLinecap="round"
            />
          </g>

          <g
            style={{ ...getPartStyle("seat"), transitionDelay: "50ms" }}
            filter="url(#woodShadow)"
          >
            <ellipse
              cx="0"
              cy="50"
              rx="105"
              ry="65"
              fill="url(#caningPattern)"
              stroke="url(#bentWoodGrad)"
              strokeWidth="16"
            />
          </g>
        </svg>

        {isExploded && (
          <div
            className="absolute inset-0 pointer-events-none"
            style={{
              opacity: isExploded ? 1 : 0,
              transition: "opacity 0.5s ease-in-out 0.8s",
            }}
          >
            <div className="absolute top-[15%] left-[5%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              {t("interactiveModules.productDeconstruction.backFrameLabel")}
            </div>
            <div className="absolute top-[30%] left-[20%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              {t("interactiveModules.productDeconstruction.innerArchLabel")}
            </div>
            <div className="absolute top-[10%] right-[25%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              {t("interactiveModules.productDeconstruction.seatLabel")}
            </div>
            <div className="absolute bottom-[10%] right-[10%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              {t("interactiveModules.productDeconstruction.frontLegsLabel")}
            </div>
            <div className="absolute bottom-[5%] left-[25%] bg-amber-100/95 text-amber-900 px-3 py-2 rounded-md text-sm shadow-lg border border-amber-200 font-medium">
              {t("interactiveModules.productDeconstruction.ringLabel")}
            </div>
          </div>
        )}
      </div>

      <div className="text-center">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-amber-700 text-white font-semibold rounded-lg hover:bg-amber-800 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 transition-all transform hover:scale-105 active:scale-95"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>
        <p className="text-sm text-gray-600 mt-3 px-4">
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}

------------------dobre-----------------------

import { SEOHead } from "@/components/seo-head";
import { HeroSection } from "@/components/hero-section";
import { BiographySection } from "@/components/biography-section";
import { CollectionSection } from "@/components/collection-section";
import { InteractiveModulesSection } from "@/components/interactive-modules-section";
import { HeritageSection } from "@/components/heritage-section";
import { TimelineSection } from "@/components/timeline-section";
import { FooterSection } from "@/components/footer-section";
import { useTranslation } from "react-i18next";
import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { ArrowUp } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";

const pageVariants = {
  initial: {
    opacity: 0,
  },
  in: {
    opacity: 1,
  },
  out: {
    opacity: 0,
  },
};

const pageTransition = {
  type: "tween",
  ease: "anticipate",
  duration: 0.5,
};

export default function Home() {
  const { t } = useTranslation();
  const [showWelcomePopup, setShowWelcomePopup] = useState(false);
  const [isScrollTopVisible, setScrollTopVisible] = useState(false);

  const toggleScrollTopVisibility = () => {
    if (window.scrollY > 300) {
      setScrollTopVisible(true);
    } else {
      setScrollTopVisible(false);
    }
  };

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  useEffect(() => {
    const robustScrollToHash = (hash: string) => {
      if (!hash) return;
      const id = hash.replace("#", "");
      let attempts = 0;
      const interval = setInterval(() => {
        const element = document.getElementById(id);
        attempts++;
        if (element) {
          element.scrollIntoView({ behavior: "smooth", block: "start" });
          clearInterval(interval);
        } else if (attempts > 20) {
          clearInterval(interval);
        }
      }, 100);
    };

    const handleHashAction = () => {
      robustScrollToHash(window.location.hash);
    };

    handleHashAction();
    window.addEventListener("hashchange", handleHashAction);

    return () => {
      window.removeEventListener("hashchange", handleHashAction);
    };
  }, []);

  useEffect(() => {
    window.addEventListener("scroll", toggleScrollTopVisibility);
    const hasSeenPopup = sessionStorage.getItem("welcomePopupSeen");
    if (!hasSeenPopup) {
      const timer = setTimeout(() => {
        setShowWelcomePopup(true);
        sessionStorage.setItem("welcomePopupSeen", "true");
      }, 500);
      return () => clearTimeout(timer);
    }
    return () => {
      window.removeEventListener("scroll", toggleScrollTopVisibility);
    };
  }, []);

  return (
    <motion.div
      initial="initial"
      animate="in"
      exit="out"
      variants={pageVariants}
      transition={pageTransition}
    >
      <SEOHead isHomePage={true} />
      <a
        href="#main-content"
        className="skip-link focus:outline-none focus:ring-2 focus:ring-ring"
        data-testid="link-skip-content"
      >
        {t("navigation.skipToContent")}
      </a>
      <main id="main-content" className="transition-all duration-300">
        <HeroSection />
        <BiographySection />
        <CollectionSection />
        <InteractiveModulesSection />
        <HeritageSection />
        <TimelineSection />
      </main>
      <FooterSection />
      <div
        id="aria-announcements"
        className="sr-only"
        aria-live="polite"
        aria-atomic="true"
        data-testid="aria-announcements"
      ></div>
      <Dialog open={showWelcomePopup} onOpenChange={setShowWelcomePopup}>
        <DialogContent className="w-[95vw] sm:w-full sm:max-w-md text-center">
          <DialogHeader>
            <DialogTitle className="text-xl font-bold text-primary font-serif">
              {t("popup.title")}
            </DialogTitle>
            <DialogDescription asChild>
              <div className="space-y-4 pt-4 text-sm leading-relaxed text-muted-foreground">
                <p>{t("popup.mainText")}</p>
                <p className="font-semibold text-foreground">
                  {t("popup.dedication")}
                </p>
                <p className="text-xs italic pt-2">{t("popup.disclaimer")}</p>
              </div>
            </DialogDescription>
          </DialogHeader>
        </DialogContent>
      </Dialog>
      <AnimatePresence>
        {isScrollTopVisible && (
          <motion.button
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.8 }}
            transition={{ type: "spring", stiffness: 300, damping: 20 }}
            onClick={scrollToTop}
            className="fixed bottom-6 right-6 z-50 p-3 bg-primary text-primary-foreground rounded-full shadow-lg hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:ring-offset-background"
            aria-label={t("common.scrollToTop")}
            data-testid="button-scroll-top"
          >
            <ArrowUp className="w-6 h-6" />
          </motion.button>
        )}
      </AnimatePresence>
    </motion.div>
  );
}
