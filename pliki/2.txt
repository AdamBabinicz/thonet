import { useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { useAriaLive } from "@/hooks/useAriaLive";

export function ProductDeconstruction() {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState(false);
  const { announce } = useAriaLive();

  const toggleDeconstruction = () => {
    const nextState = !isExploded;
    setIsExploded(nextState);

    const message = nextState
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    announce(message);
  };

  const parts = {
    backLoop: {
      y: isExploded ? 110 : 0,
      x: isExploded ? -75 : 0,
      rotate: isExploded ? -12 : 0,
    },
    seatAndRing: {
      y: isExploded ? -75 : 0,
      x: isExploded ? 75 : 0,
      rotate: isExploded ? 12 : 0,
    },
    frontLegs: {
      y: isExploded ? -140 : 0,
      x: isExploded ? -50 : 0,
      rotate: isExploded ? -18 : 0,
    },
  };

  const transition = { type: "spring", damping: 16, stiffness: 90 };

  return (
    <div
      className="bg-card rounded-xl p-6 sm:p-8 shadow-lg flex flex-col"
      data-testid="module-product-deconstruction"
    >
      <h3
        className="text-2xl font-semibold text-card-foreground mb-4"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>
      <p
        className="text-muted-foreground mb-6"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-4 sm:p-8 mb-6 flex-grow min-h-[450px] flex items-center justify-center overflow-hidden">
        <svg
          viewBox="-160 -210 320 400"
          className="w-full h-full max-w-[350px] max-h-[350px]"
          data-testid="chair-model"
          aria-labelledby="deconstruction-title"
        >
          <defs>
            <linearGradient
              id="finalWoodGrad"
              x1="0%"
              y1="0%"
              x2="80%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#b9936c" />
              <stop offset="50%" stopColor="#8b5e34" />
              <stop offset="100%" stopColor="#5a3d24" />
            </linearGradient>
            <filter
              id="finalShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="5"
                dy="8"
                stdDeviation="5"
                floodColor="#000"
                floodOpacity="0.2"
              />
            </filter>
            <clipPath id="seatClipPath">
              <ellipse cx="0" cy="20" rx="63" ry="21" />
            </clipPath>
          </defs>

          <motion.g
            animate={parts.backLoop}
            transition={transition}
            filter="url(#finalShadow)"
            data-testid="chair-part-backLoop"
          >
            {/* Redrawn backrest with symmetrical, splayed-out legs */}
            <path
              d="M -65 170 C -85 80, -70 -140, 0 -140 C 70 -140, 85 80, 65 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M -30 -10 C -35 -70, 35 -70, 30 -10"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seatAndRing}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-ring"
          >
            <ellipse
              cx="0"
              cy="50"
              rx="50"
              ry="15"
              stroke="url(#finalWoodGrad)"
              strokeWidth="11"
              fill="none"
            />
          </motion.g>

          <motion.g
            animate={parts.frontLegs}
            transition={{ ...transition, delay: 0.1 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-frontLegs"
          >
            <path
              d="M -45 25 C -45 80, -50 170, -50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 45 25 C 45 80, 50 170, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seatAndRing}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-seat"
          >
            <ellipse
              cx="0"
              cy="20"
              rx="65"
              ry="22"
              fill="#f3e2c7"
              stroke="#5a3d24"
              strokeWidth="6"
            />
            <g clipPath="url(#seatClipPath)" opacity="0.5">
              {[...Array(15)].map((_, i) => (
                <path
                  key={`h${i}`}
                  d={`M -65 ${-2 + i * 2.5} C -30 ${-5 + i * 2.5}, 30 ${
                    -5 + i * 2.5
                  }, 65 ${-2 + i * 2.5}`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
              {[...Array(13)].map((_, i) => (
                <path
                  key={`v${i}`}
                  d={`M ${-60 + i * 10} -20 C ${-60 + i * 10} -15, ${
                    -60 + i * 10
                  } -15, ${-62 + i * 10} 42`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
            </g>
          </motion.g>
        </svg>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0, scale: isExploded ? 1 : 0.9 }}
          transition={{ duration: 0.4, delay: 0.2 }}
          className="absolute inset-0 pointer-events-none"
        >
          <div className="absolute top-[80%] left-[2%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.backFrameLabel")}
          </div>
          <div className="absolute top-[20%] right-[5%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.seatLabel")}
          </div>
          <div className="absolute top-[5%] left-[10%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.frontLegsLabel")}
          </div>
        </motion.div>
      </div>

      <div className="text-center mt-auto">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-primary text-primary-foreground font-semibold rounded-lg hover:bg-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background transition-all"
          aria-expanded={isExploded}
          aria-controls="chair-model"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>
        <p
          className="text-sm text-muted-foreground mt-3 px-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}


---------------------------------

import { useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { useAriaLive } from "@/hooks/useAriaLive";

export function ProductDeconstruction() {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState(false);
  const { announce } = useAriaLive();

  const toggleDeconstruction = () => {
    const nextState = !isExploded;
    setIsExploded(nextState);

    const message = nextState
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    announce(message);
  };

  const parts = {
    backLoop: {
      y: isExploded ? 110 : 0,
      x: isExploded ? -75 : 0,
      rotate: isExploded ? -12 : 0,
    },
    seatAndRing: {
      y: isExploded ? -75 : 0,
      x: isExploded ? 75 : 0,
      rotate: isExploded ? 12 : 0,
    },
    frontLegs: {
      y: isExploded ? -140 : 0,
      x: isExploded ? -50 : 0,
      rotate: isExploded ? -18 : 0,
    },
  };

  const transition = { type: "spring", damping: 16, stiffness: 90 };

  return (
    <div
      className="bg-card rounded-xl p-6 sm:p-8 shadow-lg flex flex-col"
      data-testid="module-product-deconstruction"
    >
      <h3
        className="text-2xl font-semibold text-card-foreground mb-4"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>
      <p
        className="text-muted-foreground mb-6"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-4 sm:p-8 mb-6 flex-grow min-h-[450px] flex items-center justify-center overflow-hidden">
        <svg
          viewBox="-160 -210 320 400"
          className="w-full h-full max-w-[350px] max-h-[350px]"
          data-testid="chair-model"
          aria-labelledby="deconstruction-title"
        >
          <defs>
            <linearGradient
              id="finalWoodGrad"
              x1="0%"
              y1="0%"
              x2="80%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#b9936c" />
              <stop offset="50%" stopColor="#8b5e34" />
              <stop offset="100%" stopColor="#5a3d24" />
            </linearGradient>
            <filter
              id="finalShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="5"
                dy="8"
                stdDeviation="5"
                floodColor="#000"
                floodOpacity="0.2"
              />
            </filter>
            <clipPath id="seatClipPath">
              <ellipse cx="0" cy="20" rx="63" ry="21" />
            </clipPath>
          </defs>

          <motion.g
            animate={parts.backLoop}
            transition={transition}
            filter="url(#finalShadow)"
            data-testid="chair-part-backLoop"
          >
            <g transform="translate(0, -20)">
              <path
                d="M -65 170 C -60 80, -50 -140, 0 -140 C 50 -140, 60 80, 65 170"
                stroke="url(#finalWoodGrad)"
                strokeWidth="14"
                fill="none"
                strokeLinecap="round"
              />
              <path
                d="M -30 -10 C -35 -70, 35 -70, 30 -10"
                stroke="url(#finalWoodGrad)"
                strokeWidth="12"
                fill="none"
                strokeLinecap="round"
              />
            </g>
          </motion.g>

          <g transform="translate(0, 10)">
            <motion.g
              animate={parts.seatAndRing}
              transition={{ ...transition, delay: 0.05 }}
              filter="url(#finalShadow)"
              data-testid="chair-part-ring"
            >
              <ellipse
                cx="0"
                cy="50"
                rx="50"
                ry="15"
                stroke="url(#finalWoodGrad)"
                strokeWidth="11"
                fill="none"
              />
            </motion.g>

            <motion.g
              animate={parts.frontLegs}
              transition={{ ...transition, delay: 0.1 }}
              filter="url(#finalShadow)"
              data-testid="chair-part-frontLegs"
            >
              <path
                d="M -45 25 C -45 80, -50 170, -50 170"
                stroke="url(#finalWoodGrad)"
                strokeWidth="12"
                fill="none"
                strokeLinecap="round"
              />
              <path
                d="M 45 25 C 45 80, 50 170, 50 170"
                stroke="url(#finalWoodGrad)"
                strokeWidth="12"
                fill="none"
                strokeLinecap="round"
              />
            </motion.g>

            <motion.g
              animate={parts.seatAndRing}
              transition={{ ...transition, delay: 0.05 }}
              filter="url(#finalShadow)"
              data-testid="chair-part-seat"
            >
              <ellipse
                cx="0"
                cy="20"
                rx="65"
                ry="22"
                fill="#f3e2c7"
                stroke="#5a3d24"
                strokeWidth="6"
              />
              <g clipPath="url(#seatClipPath)" opacity="0.5">
                {[...Array(15)].map((_, i) => (
                  <path
                    key={`h${i}`}
                    d={`M -65 ${-2 + i * 2.5} C -30 ${-5 + i * 2.5}, 30 ${
                      -5 + i * 2.5
                    }, 65 ${-2 + i * 2.5}`}
                    stroke="#ad885c"
                    strokeWidth="1.2"
                    fill="none"
                  />
                ))}
                {[...Array(13)].map((_, i) => (
                  <path
                    key={`v${i}`}
                    d={`M ${-60 + i * 10} -20 C ${-60 + i * 10} -15, ${
                      -60 + i * 10
                    } -15, ${-62 + i * 10} 42`}
                    stroke="#ad885c"
                    strokeWidth="1.2"
                    fill="none"
                  />
                ))}
              </g>
            </motion.g>
          </g>
        </svg>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0, scale: isExploded ? 1 : 0.9 }}
          transition={{ duration: 0.4, delay: 0.2 }}
          className="absolute inset-0 pointer-events-none"
        >
          <div className="absolute top-[80%] left-[2%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.backFrameLabel")}
          </div>
          <div className="absolute top-[20%] right-[5%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.seatLabel")}
          </div>
          <div className="absolute top-[5%] left-[10%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.frontLegsLabel")}
          </div>
        </motion.div>
      </div>

      <div className="text-center mt-auto">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-primary text-primary-foreground font-semibold rounded-lg hover:bg-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background transition-all"
          aria-expanded={isExploded}
          aria-controls="chair-model"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>
        <p
          className="text-sm text-muted-foreground mt-3 px-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}

--------------------------------------

import { useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { useAriaLive } from "@/hooks/useAriaLive";

export function ProductDeconstruction() {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState(false);
  const { announce } = useAriaLive();

  const toggleDeconstruction = () => {
    const nextState = !isExploded;
    setIsExploded(nextState);

    const message = nextState
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    announce(message);
  };

  const parts = {
    backLoop: {
      y: isExploded ? 110 : 0,
      x: isExploded ? -75 : 0,
      rotate: isExploded ? -12 : 0,
    },
    seatAndRing: {
      y: isExploded ? -75 : 0,
      x: isExploded ? 75 : 0,
      rotate: isExploded ? 12 : 0,
    },
    frontLegs: {
      y: isExploded ? -140 : 0,
      x: isExploded ? -50 : 0,
      rotate: isExploded ? -18 : 0,
    },
  };

  const transition = { type: "spring", damping: 16, stiffness: 90 };

  return (
    <div
      className="bg-card rounded-xl p-6 sm:p-8 shadow-lg flex flex-col"
      data-testid="module-product-deconstruction"
    >
      <h3
        className="text-2xl font-semibold text-card-foreground mb-4"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>
      <p
        className="text-muted-foreground mb-6"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-4 sm:p-8 mb-6 flex-grow min-h-[450px] flex items-center justify-center overflow-hidden">
        <svg
          viewBox="-160 -210 320 400"
          className="w-full h-full max-w-[350px] max-h-[350px]"
          data-testid="chair-model"
          aria-labelledby="deconstruction-title"
        >
          <defs>
            <linearGradient
              id="finalWoodGrad"
              x1="0%"
              y1="0%"
              x2="80%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#b9936c" />
              <stop offset="50%" stopColor="#8b5e34" />
              <stop offset="100%" stopColor="#5a3d24" />
            </linearGradient>
            <filter
              id="finalShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="5"
                dy="8"
                stdDeviation="5"
                floodColor="#000"
                floodOpacity="0.2"
              />
            </filter>
            <clipPath id="seatClipPath">
              <ellipse cx="0" cy="20" rx="63" ry="21" />
            </clipPath>
          </defs>

          <motion.g
            animate={parts.backLoop}
            transition={transition}
            filter="url(#finalShadow)"
            data-testid="chair-part-backLoop"
          >
            <path
              d="M -50 170 C -45 50, -100 -150, 0 -150 C 100 -150, 45 50, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M -30 -10 C -35 -70, 35 -70, 30 -10"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seatAndRing}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-ring"
          >
            <ellipse
              cx="0"
              cy="50"
              rx="50"
              ry="15"
              stroke="url(#finalWoodGrad)"
              strokeWidth="11"
              fill="none"
            />
          </motion.g>

          <motion.g
            animate={parts.frontLegs}
            transition={{ ...transition, delay: 0.1 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-frontLegs"
          >
            <path
              d="M -45 25 C -45 80, -50 170, -50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 45 25 C 45 80, 50 170, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seatAndRing}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-seat"
          >
            <ellipse
              cx="0"
              cy="20"
              rx="65"
              ry="22"
              fill="#f3e2c7"
              stroke="#5a3d24"
              strokeWidth="6"
            />
            <g clipPath="url(#seatClipPath)" opacity="0.5">
              {[...Array(15)].map((_, i) => (
                <path
                  key={`h${i}`}
                  d={`M -65 ${-2 + i * 2.5} C -30 ${-5 + i * 2.5}, 30 ${
                    -5 + i * 2.5
                  }, 65 ${-2 + i * 2.5}`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
              {[...Array(13)].map((_, i) => (
                <path
                  key={`v${i}`}
                  d={`M ${-60 + i * 10} -20 C ${-60 + i * 10} -15, ${
                    -60 + i * 10
                  } -15, ${-62 + i * 10} 42`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
            </g>
          </motion.g>
        </svg>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0, scale: isExploded ? 1 : 0.9 }}
          transition={{ duration: 0.4, delay: 0.2 }}
          className="absolute inset-0 pointer-events-none"
        >
          <div className="absolute top-[80%] left-[2%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.backFrameLabel")}
          </div>
          <div className="absolute top-[20%] right-[5%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.seatLabel")}
          </div>
          <div className="absolute top-[5%] left-[10%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.frontLegsLabel")}
          </div>
        </motion.div>
      </div>

      <div className="text-center mt-auto">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-primary text-primary-foreground font-semibold rounded-lg hover:bg-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background transition-all"
          aria-expanded={isExploded}
          aria-controls="chair-model"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>
        <p
          className="text-sm text-muted-foreground mt-3 px-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}

---------------------------------

import { useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { useAriaLive } from "@/hooks/useAriaLive";

export function ProductDeconstruction() {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState(false);
  const { announce } = useAriaLive();

  const toggleDeconstruction = () => {
    const nextState = !isExploded;
    setIsExploded(nextState);

    const message = nextState
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    announce(message);
  };

  const parts = {
    backLoop: {
      y: isExploded ? 110 : 0,
      x: isExploded ? -75 : 0,
      rotate: isExploded ? -12 : 0,
    },
    seatAndRing: {
      y: isExploded ? -75 : 0,
      x: isExploded ? 75 : 0,
      rotate: isExploded ? 12 : 0,
    },
    frontLegs: {
      y: isExploded ? -140 : 0,
      x: isExploded ? -50 : 0,
      rotate: isExploded ? -18 : 0,
    },
  };

  const transition = { type: "spring", damping: 16, stiffness: 90 };

  return (
    <div
      className="bg-card rounded-xl p-6 sm:p-8 shadow-lg flex flex-col"
      data-testid="module-product-deconstruction"
    >
      <h3
        className="text-2xl font-semibold text-card-foreground mb-4"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>
      <p
        className="text-muted-foreground mb-6"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-4 sm:p-8 mb-6 flex-grow min-h-[450px] flex items-center justify-center overflow-hidden">
        <svg
          viewBox="-160 -210 320 400"
          className="w-full h-full max-w-[350px] max-h-[350px]"
          data-testid="chair-model"
          aria-labelledby="deconstruction-title"
        >
          <defs>
            <linearGradient
              id="finalWoodGrad"
              x1="0%"
              y1="0%"
              x2="80%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#b9936c" />
              <stop offset="50%" stopColor="#8b5e34" />
              <stop offset="100%" stopColor="#5a3d24" />
            </linearGradient>
            <filter
              id="finalShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="5"
                dy="8"
                stdDeviation="5"
                floodColor="#000"
                floodOpacity="0.2"
              />
            </filter>
            <clipPath id="seatClipPath">
              <ellipse cx="0" cy="20" rx="63" ry="21" />
            </clipPath>
          </defs>

          <motion.g
            animate={parts.backLoop}
            transition={transition}
            filter="url(#finalShadow)"
            data-testid="chair-part-backLoop"
          >
            <path
              d="M -50 170 C -45 50, -100 -150, 0 -150 C 100 -150, 45 50, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M -42 -85 C -45 -135, 45 -135, 42 -85"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seatAndRing}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-ring"
          >
            <ellipse
              cx="0"
              cy="50"
              rx="50"
              ry="15"
              stroke="url(#finalWoodGrad)"
              strokeWidth="11"
              fill="none"
            />
          </motion.g>

          <motion.g
            animate={parts.frontLegs}
            transition={{ ...transition, delay: 0.1 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-frontLegs"
          >
            <path
              d="M -45 25 C -45 80, -50 170, -50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 45 25 C 45 80, 50 170, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seatAndRing}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-seat"
          >
            <ellipse
              cx="0"
              cy="20"
              rx="65"
              ry="22"
              fill="#f3e2c7"
              stroke="#5a3d24"
              strokeWidth="6"
            />
            <g clipPath="url(#seatClipPath)" opacity="0.5">
              {[...Array(15)].map((_, i) => (
                <path
                  key={`h${i}`}
                  d={`M -65 ${-2 + i * 2.5} C -30 ${-5 + i * 2.5}, 30 ${
                    -5 + i * 2.5
                  }, 65 ${-2 + i * 2.5}`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
              {[...Array(13)].map((_, i) => (
                <path
                  key={`v${i}`}
                  d={`M ${-60 + i * 10} -20 C ${-60 + i * 10} -15, ${
                    -60 + i * 10
                  } -15, ${-62 + i * 10} 42`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
            </g>
          </motion.g>
        </svg>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0, scale: isExploded ? 1 : 0.9 }}
          transition={{ duration: 0.4, delay: 0.2 }}
          className="absolute inset-0 pointer-events-none"
        >
          <div className="absolute top-[80%] left-[2%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.backFrameLabel")}
          </div>
          <div className="absolute top-[20%] right-[5%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.seatLabel")}
          </div>
          <div className="absolute top-[5%] left-[10%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.frontLegsLabel")}
          </div>
        </motion.div>
      </div>

      <div className="text-center mt-auto">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-primary text-primary-foreground font-semibold rounded-lg hover:bg-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background transition-all"
          aria-expanded={isExploded}
          aria-controls="chair-model"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>
        <p
          className="text-sm text-muted-foreground mt-3 px-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}

--------------------------------

import { useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { useAriaLive } from "@/hooks/useAriaLive";

export function ProductDeconstruction() {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState(false);
  const { announce } = useAriaLive();

  const toggleDeconstruction = () => {
    const nextState = !isExploded;
    setIsExploded(nextState);

    const message = nextState
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    announce(message);
  };

  const parts = {
    backLoop: {
      y: isExploded ? 110 : 0,
      x: isExploded ? -75 : 0,
      rotate: isExploded ? -12 : 0,
    },
    seatAndRing: {
      y: isExploded ? -75 : 0,
      x: isExploded ? 75 : 0,
      rotate: isExploded ? 12 : 0,
    },
    frontLegs: {
      y: isExploded ? -140 : 0,
      x: isExploded ? -50 : 0,
      rotate: isExploded ? -18 : 0,
    },
  };

  const transition = { type: "spring", damping: 16, stiffness: 90 };

  return (
    <div
      className="bg-card rounded-xl p-6 sm:p-8 shadow-lg flex flex-col"
      data-testid="module-product-deconstruction"
    >
      <h3
        className="text-2xl font-semibold text-card-foreground mb-4"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>
      <p
        className="text-muted-foreground mb-6"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-4 sm:p-8 mb-6 flex-grow min-h-[450px] flex items-center justify-center overflow-hidden">
        <svg
          viewBox="-160 -210 320 400"
          className="w-full h-full max-w-[350px] max-h-[350px]"
          data-testid="chair-model"
          aria-labelledby="deconstruction-title"
        >
          <defs>
            <linearGradient
              id="finalWoodGrad"
              x1="0%"
              y1="0%"
              x2="80%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#b9936c" />
              <stop offset="50%" stopColor="#8b5e34" />
              <stop offset="100%" stopColor="#5a3d24" />
            </linearGradient>
            <filter
              id="finalShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="5"
                dy="8"
                stdDeviation="5"
                floodColor="#000"
                floodOpacity="0.2"
              />
            </filter>
            <clipPath id="seatClipPath">
              <ellipse cx="0" cy="20" rx="63" ry="21" />
            </clipPath>
          </defs>

          <motion.g
            animate={parts.backLoop}
            transition={transition}
            filter="url(#finalShadow)"
            data-testid="chair-part-backLoop"
          >
            <path
              d="M -50 170 C -45 50, -100 -150, 0 -150 C 100 -150, 45 50, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M -43 -40 C -45 -90, 45 -90, 43 -40"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seatAndRing}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-ring"
          >
            <ellipse
              cx="0"
              cy="50"
              rx="50"
              ry="15"
              stroke="url(#finalWoodGrad)"
              strokeWidth="11"
              fill="none"
            />
          </motion.g>

          <motion.g
            animate={parts.frontLegs}
            transition={{ ...transition, delay: 0.1 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-frontLegs"
          >
            <path
              d="M -45 25 C -45 80, -50 170, -50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 45 25 C 45 80, 50 170, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seatAndRing}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-seat"
          >
            <ellipse
              cx="0"
              cy="20"
              rx="65"
              ry="22"
              fill="#f3e2c7"
              stroke="#5a3d24"
              strokeWidth="6"
            />
            <g clipPath="url(#seatClipPath)" opacity="0.5">
              {[...Array(15)].map((_, i) => (
                <path
                  key={`h${i}`}
                  d={`M -65 ${-2 + i * 2.5} C -30 ${-5 + i * 2.5}, 30 ${
                    -5 + i * 2.5
                  }, 65 ${-2 + i * 2.5}`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
              {[...Array(13)].map((_, i) => (
                <path
                  key={`v${i}`}
                  d={`M ${-60 + i * 10} -20 C ${-60 + i * 10} -15, ${
                    -60 + i * 10
                  } -15, ${-62 + i * 10} 42`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
            </g>
          </motion.g>
        </svg>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0, scale: isExploded ? 1 : 0.9 }}
          transition={{ duration: 0.4, delay: 0.2 }}
          className="absolute inset-0 pointer-events-none"
        >
          <div className="absolute top-[80%] left-[2%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.backFrameLabel")}
          </div>
          <div className="absolute top-[20%] right-[5%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.seatLabel")}
          </div>
          <div className="absolute top-[5%] left-[10%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.frontLegsLabel")}
          </div>
        </motion.div>
      </div>

      <div className="text-center mt-auto">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-primary text-primary-foreground font-semibold rounded-lg hover:bg-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background transition-all"
          aria-expanded={isExploded}
          aria-controls="chair-model"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>
        <p
          className="text-sm text-muted-foreground mt-3 px-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}


---------------------------------

import { useState } from "react";
import { motion } from "framer-motion";
import { useTranslation } from "react-i18next";
import { useAriaLive } from "@/hooks/useAriaLive";

export function ProductDeconstruction() {
  const { t } = useTranslation();
  const [isExploded, setIsExploded] = useState(false);
  const { announce } = useAriaLive();

  const toggleDeconstruction = () => {
    const nextState = !isExploded;
    setIsExploded(nextState);

    const message = nextState
      ? t("interactiveModules.productDeconstruction.ariaChairExploded")
      : t("interactiveModules.productDeconstruction.ariaChairReassembled");
    announce(message);
  };

  const parts = {
    backLoop: {
      y: isExploded ? 110 : 0,
      x: isExploded ? -75 : 0,
      rotate: isExploded ? -12 : 0,
    },
    seatAndRing: {
      y: isExploded ? -75 : 0,
      x: isExploded ? 75 : 0,
      rotate: isExploded ? 12 : 0,
    },
    frontLegs: {
      y: isExploded ? -140 : 0,
      x: isExploded ? -50 : 0,
      rotate: isExploded ? -18 : 0,
    },
  };

  const transition = { type: "spring", damping: 16, stiffness: 90 };

  return (
    <div
      className="bg-card rounded-xl p-6 sm:p-8 shadow-lg flex flex-col"
      data-testid="module-product-deconstruction"
    >
      <h3
        className="text-2xl font-semibold text-card-foreground mb-4"
        data-testid="text-deconstruction-title"
      >
        {t("interactiveModules.productDeconstruction.title")}
      </h3>
      <p
        className="text-muted-foreground mb-6"
        data-testid="text-deconstruction-description"
      >
        {t("interactiveModules.productDeconstruction.description")}
      </p>

      <div className="relative bg-muted rounded-lg p-4 sm:p-8 mb-6 flex-grow min-h-[450px] flex items-center justify-center overflow-hidden">
        <svg
          viewBox="-160 -210 320 400"
          className="w-full h-full max-w-[350px] max-h-[350px]"
          data-testid="chair-model"
          aria-labelledby="deconstruction-title"
        >
          <defs>
            <linearGradient
              id="finalWoodGrad"
              x1="0%"
              y1="0%"
              x2="80%"
              y2="100%"
            >
              <stop offset="0%" stopColor="#b9936c" />
              <stop offset="50%" stopColor="#8b5e34" />
              <stop offset="100%" stopColor="#5a3d24" />
            </linearGradient>
            <filter
              id="finalShadow"
              x="-50%"
              y="-50%"
              width="200%"
              height="200%"
            >
              <feDropShadow
                dx="5"
                dy="8"
                stdDeviation="5"
                floodColor="#000"
                floodOpacity="0.2"
              />
            </filter>
            <clipPath id="seatClipPath">
              <ellipse cx="0" cy="20" rx="63" ry="21" />
            </clipPath>
          </defs>

          <motion.g
            animate={parts.backLoop}
            transition={transition}
            filter="url(#finalShadow)"
            data-testid="chair-part-backLoop"
          >
            <path
              d="M -50 170 C -45 50, -100 -150, 0 -150 C 100 -150, 45 50, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="14"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M -48 -40 C -50 -90, 50 -90, 48 -40"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seatAndRing}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-ring"
          >
            <ellipse
              cx="0"
              cy="50"
              rx="50"
              ry="15"
              stroke="url(#finalWoodGrad)"
              strokeWidth="11"
              fill="none"
            />
          </motion.g>

          <motion.g
            animate={parts.frontLegs}
            transition={{ ...transition, delay: 0.1 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-frontLegs"
          >
            <path
              d="M -45 25 C -45 80, -50 170, -50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
            <path
              d="M 45 25 C 45 80, 50 170, 50 170"
              stroke="url(#finalWoodGrad)"
              strokeWidth="12"
              fill="none"
              strokeLinecap="round"
            />
          </motion.g>

          <motion.g
            animate={parts.seatAndRing}
            transition={{ ...transition, delay: 0.05 }}
            filter="url(#finalShadow)"
            data-testid="chair-part-seat"
          >
            <ellipse
              cx="0"
              cy="20"
              rx="65"
              ry="22"
              fill="#f3e2c7"
              stroke="#5a3d24"
              strokeWidth="6"
            />
            <g clipPath="url(#seatClipPath)" opacity="0.5">
              {[...Array(15)].map((_, i) => (
                <path
                  key={`h${i}`}
                  d={`M -65 ${-2 + i * 2.5} C -30 ${-5 + i * 2.5}, 30 ${
                    -5 + i * 2.5
                  }, 65 ${-2 + i * 2.5}`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
              {[...Array(13)].map((_, i) => (
                <path
                  key={`v${i}`}
                  d={`M ${-60 + i * 10} -20 C ${-60 + i * 10} -15, ${
                    -60 + i * 10
                  } -15, ${-62 + i * 10} 42`}
                  stroke="#ad885c"
                  strokeWidth="1.2"
                  fill="none"
                />
              ))}
            </g>
          </motion.g>
        </svg>

        <motion.div
          animate={{ opacity: isExploded ? 1 : 0, scale: isExploded ? 1 : 0.9 }}
          transition={{ duration: 0.4, delay: 0.2 }}
          className="absolute inset-0 pointer-events-none"
        >
          <div className="absolute top-[80%] left-[2%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.backFrameLabel")}
          </div>
          <div className="absolute top-[20%] right-[5%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.seatLabel")}
          </div>
          <div className="absolute top-[5%] left-[10%] bg-background/80 backdrop-blur-sm text-foreground px-3 py-1 rounded-md text-xs sm:text-sm shadow-lg border font-medium">
            {t("interactiveModules.productDeconstruction.frontLegsLabel")}
          </div>
        </motion.div>
      </div>

      <div className="text-center mt-auto">
        <button
          onClick={toggleDeconstruction}
          className="px-8 py-3 bg-primary text-primary-foreground font-semibold rounded-lg hover:bg-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background transition-all"
          aria-expanded={isExploded}
          aria-controls="chair-model"
          data-testid="button-deconstruct"
        >
          {isExploded
            ? t("interactiveModules.productDeconstruction.reassembleButton")
            : t("interactiveModules.productDeconstruction.startButton")}
        </button>
        <p
          className="text-sm text-muted-foreground mt-3 px-4"
          data-testid="text-chair-description"
        >
          {t("interactiveModules.productDeconstruction.helpText")}
        </p>
      </div>
    </div>
  );
}

